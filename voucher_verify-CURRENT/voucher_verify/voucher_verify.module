<?php
/**
 * Implementation of hook_webform_validation_validators().
 */
function voucher_verify_webform_validation_validators() {
  return array(
    'voucher_id' => array(
      'name' => "Validate Certificate/Voucher ID",
      'component_types' => array(
        'textfield',
      ),
      'description' => t('Verifies that the entered vendor and IDs match and are valid.')
    )
  );
}

/**
 * Implementation of hook_webform_validation_validate().
 */
function voucher_verify_webform_validation_validate($validator_name, $items, $components, $rule) {
  if ($items) {
    $errors = array();
    switch ($validator_name) {
      case 'voucher_id':
        foreach ($items as $key => $val) {
         	$ID = $val;
		     	$vendorID = substr($ID, 0, 4);    // Vendor ID is first 4 digits
		     	$vendorIDCheck = $_POST['submitted']['vendor_id']; //I would like to find a better way to do this... but it works for now.
		     	$voucherID = substr($ID, 4, 3);   // Voucher ID is the next 3 digits
		     	$voucherNum = substr($ID, 7, 7);  // Voucher Number is the next 7 digits
		     	$checkDigit = substr($ID, -1, 1); // Check digit is the last digit
		     	$digitArray = array();
		     	$factorArray = array(1,3,1,3,1,3,1,3,1,3,1,3,1,3);
		     	
		     	// Check is numerical
		     	if(!is_numeric($ID)){
		     		$errors[$key] = t('Voucher ID must be numerical data only.');
						continue;
		     	}
		     	
		     	// Check Vendor ID
          if($vendorIDCheck != $vendorID){
				  	$errors[$key] = t('Vendor ID does not match this voucher. Please recheck the vendor ID and the voucher ID');
				  	continue;
				  }
		     	
		     	// Check length
		     	if(count($factorArray) >= drupal_strlen($ID)){
		     		$errors[$key] = t('Voucher ID is too short. Please enter a valid %length digit ID.', array('%length' => count($factorArray) + 1));
						continue;
		     	}
		     	
		     	// Split the string into individual digit
		     	for($i = 0; $i < count($factorArray); $i++){
		     		$digitArray[$i] = substr($ID, $i, 1);
		     	}
		     	// Sum product of paired digits
		     	$sum = 0;
		     	for($i = 0; $i < count($digitArray); $i++ ){
		     		$sum += $factorArray[$i] * $digitArray[$i];
		     	}
		     	// Calculate valid digit
		     	$validDigit = ($sum % 10 == 0) ? 0 : 10 - ($sum % 10);
		      // Check against the check digit
		      if($validDigit != $checkDigit){
		      	$errors[$key] = t('%item is not a valid ID: Check digit is invalid. validDigit(%valid), checkDigit(%check)<br>', array('%item' => $components[$key]['name'], '%valid' => $validDigit ,'%check' => $checkDigit));
		      	continue;
		      }
		      
		      //TODO: add database check to see if this tag has already been used
		      /*
		      if(INSERT CHECK HERE){
		      	$errors[$key] = t('%value has already been used.', array('%value' => $ID));
		      	continue;
		      }
		      */
		      
        }
        return $errors;
        break;
    }
  }
}
